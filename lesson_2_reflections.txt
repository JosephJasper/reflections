What happens when you initialize a repository? Why do you need to do it?

	It sets up the structure for the tracking of commits and storing changes.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The working directory is an actual directory that exists on your computer (or online), the staging area is a construct within Git to map files and the status of those files.  The staging area allows Git to map the changes in files independently of what is currently saved in a directory.

How can you use the staging area to make sure you have one commit per logical
change?

	You can make sure you add only add one file at a time before you commit.  You can also make sure you add after each logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	If you had created alternate versions of a program or file for different "customers", it could be beneficial to create an alternate branch so you can consistently provide the file in the different formats.  It may also help with experiments for potential changes you want to make to a file, but you don't know how it will work yet.
	The branch system provides a means for a creator to continue fixing bugs and managing the main version of the file until the experiment concludes.

How do the diagrams help you visualize the branch structure?

	You can see which commits are related to which branch and are independent of other changes.  So, if a branch was created before a crucial change or bug fix you made on the master, you'll know that you need to fix it on the new branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two branches takes all the changes in both branches from the most recent commit that both branches share and applies them to that commit.
	The diagram helps to signify that the changes were made independently of each and the changes made in commits from one branch do not apply to the changes made in commits from the other.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	